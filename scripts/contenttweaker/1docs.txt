materials: Air,Grass,Ground,Wood,Rock,Iron,Anvil,Water,Lava,Leaves,Plants,Vine,Sponge,Cloth,Fire,sand,Circuits,Carpet,Glass,Redstone_Light,
TNT,Coral,Ice,Packed_Ice,Crafted_Snow,Cactus,Clay,Gourd,Dragon_Egg,Portal,Cake,Web

fields:
axisAlignedBB	MCAxisAlignedBB	No	Full Block	Lets you set the block's bounding box
beaconBase	boolean	No	false	Can this block be used as part of a beacon's base?
blockColorSupplier	IBlockColorSupplier	No	-1 as color	The block's color
blockHardness	float	No	5.0	How long it takes to break
blockLayer	String	No	"SOLID"	"SOLID", "CUTOUT_MIPPED", "CUTOUT", "TRANSLUCENT"
blockMaterial	IMaterialDefinition	No	Iron	The Block's base material
blockResistance	float	No	5.0	Explosion resistance
blockSoundType	SoundType	No	Metal	The Block's sound type (determines things like the breaking sound)
creativeTab	CreativeTab	No	Misc	The Creative tab the item will appear in
dropHandler	IBlockDropHandler	No	​	What the block will drop when broken
entitySpawnable	boolean	No	true	Can be used to prevent any entities from spawning on this block
enumBlockRenderType	String	No	"MODEL"	"INVISIBLE", "LIQUID", "ENTITYBLOCK_ANIMATED", "MODEL" → Sets how the block is rendered
fullBlock	boolean	No	True	Used for rendering and light calculations
gravity	boolean	No	false	Is this block affected by gravity
itemColorSupplier	IItemColorSupplier	No	-1 as color	The block's color when it is in item form
lightOpacity	int	No	255 if fullBlock is true or 0	Does Light pass through
lightValue	int	No	0	Light level of block, ranges from 0-1. This value is multiplied by 15 to determine the final value.
onBlockBreak	IBlockAction	No	​	Called when Block is broken.
onBlockPlace	IBlockAction	No	​	Called when Block is placed.
onRandomTick	IBlockAction	No	​	Called on a random tick event.
onUpdateTick	IBlockAction	No	​	Called when Block receives a block update.
passable	boolean	No	Depending on the IMaterialDefinition provided	Can players pass through this block?
replaceable	boolean	No	Depending on the IMaterialDefinition provided	Can this block be replaced by another block?
slipperiness	float	No	0.6f	Ice blocks are 0.98f
textureLocation	CTResourceLocation	No	null	The block's resource location, used for textures etc.
toolClass	String	No	pickaxe	Tool required to Break Block
toolLevel	int	No	2	Tool Level required to Break Block
translucent	boolean	No	false	Is see through
unlocalizedName	String	Yes	​	Name, should be all lowercase
witherProof	boolean	No	false	Can Wither's destroy this block

var example = VanillaFactory.createBlock("example", <blockmaterial:rock>);
example.setBlockHardness(1.5.0);
example.setBlockResistance(30.0);
example.setToolClass("pickaxe");
example.setToolLevel(0);
example.register();

import mods.contenttweaker.ItemFood;
import mods.contenttweaker.VanillaFactory;
import mods.contenttweaker.Item;
import mods.contenttweaker.IItemRightClick;
import mods.contenttweaker.Commands;
import mods.contenttweaker.IItemGetContainerItem;
import mods.contenttweaker.ActionResult;
import crafttweaker.command.ICommandSender;
import crafttweaker.player.IPlayer;
import crafttweaker.item.IItemStack;

var tomatosoup = VanillaFactory.createItemFood("tomatosoup", 6);
tomatosoup.saturation = 7.2;
tomatosoup.maxStackSize = 1;
tomatosoup.onItemFoodEaten = function(item, world, player) {
Commands.call("give @p minecraft:bowl", player, world, false, true);
};
tomatosoup.register();

#loader contenttweaker
import mods.contenttweaker.VanillaFactory;
import mods.zenutils.cotx.Block;
import crafttweaker.data.IData;

val te = VanillaFactory.createActualTileEntity(1);
te.onTick = function(tileEntity, world, pos) {
    if (world.remote) return;
    val data as IData = tileEntity.data;
    if (!isNull(data) && data has "time") {
        tileEntity.updateCustomData({time: data.time.asInt() + 1});
        if (data.time.asInt() % 100 == 0) {
            val player = world.getClosestPlayer(pos.x, pos.y, pos.z, 64, false);
            if (isNull(player)) return;
            player.sendChat("xxx");
        }
    } else {
        tileEntity.updateCustomData({time: 1});
        // Equivilant to
        // tileEntity.data = tileEntity.data + {time: 1};
    }
};
te.register();

val block = VanillaFactory.createExpandBlock("test", <blockmaterial:wood>);
block.tileEntity = te;
block.register();

//nirnroot

#loader contenttweaker
import mods.contenttweaker.VanillaFactory;
import mods.zenutils.cotx.Block;
import crafttweaker.data.IData;
import mods.contenttweaker.Commands;

val te = VanillaFactory.createActualTileEntity(1);
te.onTick = function(tileEntity, world, pos) {
    if (world.remote) return;
    val data as IData = tileEntity.data;
    if (!isNull(data) && data has "time") {
        tileEntity.updateCustomData({time: data.time.asInt() + 1});
        if (data.time.asInt() % 60 == 0) {
            val player = world.getClosestPlayer(pos.x, pos.y, pos.z, 64, false);
            if (isNull(player)) return;
            Commands.call("playsound additions:misc-nirnroot ambient @p", player, world, false, true);
        }
    } else {
        tileEntity.updateCustomData({time: 1});
        // Equivilant to
        // tileEntity.data = tileEntity.data + {time: 1};
    }
};
te.register();

val nirnroot = VanillaFactory.createExpandBlock("nirnroot", <blockmaterial:plants>);
nirnroot.tileEntity = te;
nirnroot.setblockHardness(0.0);
nirnroot.setblockResistance(0.0);
nirnroot.setlightOpacity(0);
nirnroot.settoolLevel(0);
nirnroot.settranslucent(true);
nirnroot.setPassable(true);
nirnroot.setblockLayer("CUTOUT", "TRANSLUCENT");
nirnroot.register(); 




























